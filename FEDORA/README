NOTE: any reference to "this directory" or "here" refers to
https://github.com/barrycarter/bcapps/blob/master/FEDORA/

NOTE: the "local" machine is the one to which you are installing
Fedora 24; the "remote" machine is any Linux machine from which you
are performing the install.

NOTE: I will sometimes refer to "Fedora 24" as "Fedora Core 24"
because many of the package names still have "fc24" in them.

This document describes how I (mostly remotely) created a minimal
Fedora Core 24 system (no gnome, no evolution, no unnecessary daemons)
running fvwm2

I assume that you have downloaded Fedora Core 24 from
https://getfedora.org/en/workstation/download/ burned and booted from
the DVD image, and clicked "Install" to install Fedora Core 24 on your
hard disk with a root password and one other user whois is an
administrator and has a password. I will refer to this user as "user"
in this document.

OPTIONAL: if you are installing Fedora to a solid-state drive (SSD),
and want the /home and /root directories on another drive, partition
as follows:

  - Set the /home partition to 5GiB. We will symlink to the remote
  drive later.

  - Set the swap partition to the size of your memory; ideally, double
  the size of your memory if you have it (but see below)

  - Leave the /boot and /boot/efi partitions as is.

  - Give the remaining space to the / partition, but leave at least
  20GiB: you probably won't need it, but the dnf installs below total
  ~9GiB, so you just might if you install even more stuff.

OPTIONAL: You make want to create a trivial "fake" user (username:
fake) with a trivial password (password: "abc123") during installation
and then create a "real" user later on, especially if you want the
real user's home directory to be on a different drive. Note that:

  - You can create a "fake" user with a weak password only during the
  installation phase (you to confirm the weak password, but it's still
  possible).

  - Do make the "fake" user an administrator (ie, a member of the
  group 'wheel'), because you will need to "sudo su" from it if you're
  creating the real user's home directory on a different partition.

  - If you choose not to create a user at all, you will be required to
  create one when Fedora first starts up. In this case, however, it
  will be impossible to use a weak password.

  - If you create a "fake" user with no password, you will have
  difficulty using "ssh", since "ssh"ing to a passwordless account
  requires tweaking /etc/sshd_config

  - If you want to ssh directly to the "root" user, you will also need to tweak /etc/sshd_config

After removing the installation media and rebooting, login as
user. You will now be in the GNOME environment. Now:

% Go to the top right of the screen, click the down arrow, and choose
the settings icon at the bottom left of the pulldown menu.

% Select "Sharing", and turn on Sharing in general and "Remote Login"
specifically.

% Logout by clicking the down arrow again, choosing your user name,
and clicking Logout. From now on, we will be working remotely.

% On your local machine (not the one on which you're installing Fedora
Core 24), add the machine's IP address to /etc/hosts something like
this:

192.168.0.3 brighton

This will let you refer to the machine as "brighton" instead of having
to type out the IP address each time. Of course, make sure you use the
machine's actual IP address, which probably won't be 192.168.0.3 in
your case.

% "ssh user@brighton" to login remotely (or "ssh fake@brighton" to
create a new user with a home directory on a different drive)

% "sudo su" to become root

% do this so you can become root passwordlessly (we will need this later):

echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel

% OPTIONAL: to move home directories to a bigger drive, run commands
similar to the following (your big drive partition may vary):

: my large drive is hereby dubbed "kemptown"
cryptsetup open /dev/sdb3 kemptown

: /dev/sdb[12] are small partitions that I will ignore

: because I installed Fedora on kemptown first, I have this issue:

# lvscan 
  ACTIVE            '/dev/fedora/root' [45.10 GiB] inherit
  ACTIVE            '/dev/fedora/home' [2.00 GiB] inherit
  ACTIVE            '/dev/fedora/swap' [64.00 GiB] inherit
  inactive          '/dev/fedora/swap' [30.56 GiB] inherit
  inactive          '/dev/fedora/home' [7.20 TiB] inherit
  inactive          '/dev/fedora/root' [50.00 GiB] inherit

Namely, I have identical LVM names on two drives. I can use lvrename
to fix, but:

# lvrename /dev/fedora/home /dev/fedora/althome
  Multiple VGs found with the same name: skipping fedora
  Use the VG UUID with --select vg_uuid=<uuid>

Thus, I used "vgdisplay" to get the correct device, but the "--select"
option does not actually exist for lvrename. However:

vgrename my-vg-id /dev/oldfedora

does work.

: this activates the 3 volumes now on /dev/oldfedora

vgchange -ay

mkdir /mnt/kemptown
mount /dev/mapper/oldfedora-home /mnt/kemptown

: add this to fstab

echo "/dev/mapper/oldfedora-home /mnt/kemptown ext4 defaults" >> /etc/fstab

: finally, link root and user directories to new drive

mkdir /mnt/kemptown/root/
mv /root /root.old
mv /home/user /home/user.old
ln -s /mnt/kemptown/root /root
ln -s /mnt/kemptown/user /home/user

: if desired, move or copy things in /home/user.old and /root.old to
: /home/user and /root respectively

% This dnf command removes pretty much everything that can safely be
removed (you may see some harmless errors).

sudo dnf remove audit gssproxy alsa-utils 'gvfs*' rtkit "gnome*" "evolution*"

% reboot to bring up the system without these daemons running (you
will need to go local to boot "fedora" (not recovery mode) and type in
your disk encryption password

shutdown -r now

% you will come up a "localhost login" or similar prompt, not a
windows environment (you don't actually need to login locally)

% Remotely, "ssh user@brighton" and "sudo su" again

% There are still several daemons running but we can stop and disable
them with systemctl

% INFO: you can use the following to see which services are still running:

systemctl -t service | egrep 'loaded +active +running'

% To disable and stop most of these services:

systemctl disable abrtd abrt-oops abrt-xorg avahi-daemon chronyd firewalld mcelog ModemManager NetworkManager-dispatcher rngd systemd-udevd systemd-logind systemd-journald avahi-daemon.socket systemd-udevd-control.socket systemd-udevd-kernel.socket systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket

% Run the above command again, but replacing "disable" with "stop":

systemctl stop abrtd abrt-oops abrt-xorg avahi-daemon chronyd firewalld mcelog ModemManager NetworkManager-dispatcher rngd systemd-udevd systemd-logind systemd-journald avahi-daemon.socket systemd-udevd-control.socket systemd-udevd-kernel.socket systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket

% NOTE: do NOT try to disable (or remove the packages that contain)
any of: "dbus", "lvm2-lvmetad", "polkit", "getty",
"user@*.service". Doing so may break things severely.

% Manually remove /etc/resolv.conf which is now a broken symlink
(dhclient will fill in the right values)

sudo rm /etc/resolv.conf

% stop selinux by editing "SELINUX=enforcing" to "SELINUX=disabled" in
/etc/selinux/config as root (changes will take place on next reboot)

% INFO: use "ps -ef | fgrep -v '['" to see the few remaining
(nonbracketed) processes. You CANNOT safely kill or remove any of these
(including "(sd-pam)")

% Put the .xinitrc, startup-nox.sh, and startup-x.sh files in this
directory in ~user, and, if desired, the systemctl-disable.sh and
dnf-installs.sh scripts into /tmp/

% reboot again to make sure the system comes up cleanly ("shutdown -r
now"); as before, you will have to choose to boot into regular fedora
and type in your disk encryption password.

% on the local machine run "sh startup-nox.sh" as user; you will need
this for dhclient

% then, remotely "ssh user@brighton" and then "sudo su" again

% You can now install many things remotely (or locally), including
fvwm2 (note that this will reinstall SOME of what we uninstalled
earlier, but only a minimal acceptable subset)

: we first install a couple of repos

sudo dnf install --allowerasing --best http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

sudo dnf install --allowerasing --best ImageMagick OpenThreads PySolFC SDL-devel alpine aspell audacity bind c++-gtk-utils-gtk2-devel community-mysql community-mysql-server dosbox dosemu elinks emacs enscript esniper expect feh ffmpeg ftp fuse-encfs fvwm gd gd-devel getmail glade glade-devel glib2 gnumeric gnuplot gpm graphviz gtk+extra-devel gtk2 gtk2-devel gtk3-devel html2ps lynx mencoder moreutils-parallel mplayer mrtg nagios nagios-plugins nano ncftp openrdate perl-CPAN php-mysqlnd pidgin postgresql postgresql-server qgis qhull rdesktop recoll rsyslog rxvt samba screen snownews stella stellarium tcsh tigervnc tk unrtf util-linux-user vice vino vlc xdotool xemacs xemacs-packages-extra-el xinetd xorg-x11-apps xpdf xsane xteddy xterm xv yum yum-utils zlib zlib-devel zlib-static mod_ldap mod_dnssd tor tor-arm-gui tor-arm onionshare privoxy celestia

: and the sources of everything installed above AND the dependencies
: (excluding those things that "dnf list installed" gives but aren't
: actually packages)

mkdir /root/dnf-sources
cd /root/dnf-sources
: see dnf-source-exclusions.txt in this directory
dnf list installed|perl -anle 'print $F[0]'|sort -u|fgrep -vf dnf-source-exclusions.txt | xargs dnf download --source
rpm -i *.rpm
: the results are in /root/rpmbuild/SOURCES/

% INFO: to see how much space dnf installed packages take up:

: note that I could make this a pipe but its useful to do in steps
dnf list installed|perl -anle 'print $F[0]'|sort -u > /tmp/dnf-installed.txt
xargs rpm -ql < /tmp/dnf-installed.txt | sort | uniq > /tmp/dnf-files.txt
xargs wc -c < /tmp/dnf-files.txt | egrep ' total$' |tee /tmp/dnf-wc-totals.txt

: for me this is 8786074786 or about 8.8 GiB

% initialize postgresql

postgresql-setup --initdb

% enable new services we want ("systemctl list-unit-files" for list)

systemctl enable postgresql mysqld nagios dnsmasq httpd

: and then start these services

systemctl start postgresql mysqld nagios dnsmasq httpd

% import postgres data

: on current machine
pg_dumpall > pgsql-super-dump.txt
: rsync over to brighton (not shown)
: on brighton
sudo -u postgres psql < /tmp/pgsql-super-dump.txt
: "psql -d main" should now work as "user"

% import mysql data

: on current machine
mysqldump --all-databases > mysql-super-dump.txt
: rsync over to brighton (not shown)
sudo mysql < /tmp/mysql-super-dump.txt

%% TODO: mysql, even with dump above, does not appear to have same
users; however "mysql -u root" works as user

% OK to rsync over /etc/httpd/conf and /etc/httpd/conf.d but not other
httpd related files. Comment out any lines like (use "apachectl
configtest" to find these):

# LoadModule authn_file_module modules/mod_authn_file.so
# LoadModule authn_alias_module modules/mod_authn_alias.so
# LoadModule authn_anon_module modules/mod_authn_anon.so
# LoadModule authn_dbm_module modules/mod_authn_dbm.so
# LoadModule authn_default_module modules/mod_authn_default.so

# LoadModule authz_host_module modules/mod_authz_host.so
# LoadModule authz_user_module modules/mod_authz_user.so
# LoadModule authz_owner_module modules/mod_authz_owner.so
# LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
# LoadModule authz_dbm_module modules/mod_authz_dbm.so
# LoadModule authz_default_module modules/mod_authz_default.so

# LoadModule disk_cache_module modules/mod_disk_cache.so

% In /etc/httpd/conf.d, remove (or move to DISABLED subdir) mod_dnssd.conf

: remove -n for production
\rsync -avxn /etc/httpd/conf /etc/httpd/conf.d root@brighton:/etc/httpd/

% To access the system remotely via vnc after reboot, run these commands:

gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino authentication-methods "['vnc']"
: replace "mypassword" with whatever password you'd like to use
gsettings set org.gnome.Vino vnc-password `echo -n "mypassword"|base64`

% if you're using an older .fvwm2rc file and want to continue using
it, this may be helpful:

sudo mkdir /usr/lib/X11
sudo ln -s /usr/libexec/fvwm/2.6.6 /usr/lib/X11/fvwm2

% other helpful symlinks if you're using older software or programs
that rely on a specific path:

sudo ln -s /bin/php /usr/local/bin/

% Reboot once again, login, run "sh startup-nox.csh" and "xinit &"

% You can then return to remote access using "vncviewer -geometry
1024x768 brigton&"

%% TODO: chsh tcsh

%% TODO: copy my .fvwm2rc file over into this dir after I get it
working right on brighton live editing

%% TODO: post this to wp with a link to github; google doesn't index
github well

%% TODO: passwordless cross machine ssh (and thus rsync)

% DONE: get dnsmasq working

%% TODO: get local httpd working

%% TODO: create ~/brighton-procs.txt for what's allowed to run on
brighton for bc-daemon-checker2.pl (and update .crontab to run this)

%% TODO: make sure bcgit alias works

%% TODO: try reinstalling OS on SSD, user dirs on HD

%% TODO: some files still have selinux attrs, remove these?:

brighton:~$ attr -l .
Attribute "selinux" has a 41 byte value for .

: however
Could not get "selinux" for .

