This document describes how I (mostly remotely) created a minimal
Fedora Core 24 system (no gnome, no evolution, no unnecessary daemons)
running fvwm2

I assume that you have downloaded Fedora Core 24 from
https://getfedora.org/en/workstation/download/ burned and booted from
the DVD image, and clicked "Install" to install Fedora Core 24 on your
hard disk with a root password and one other user whois is an
administrator and has a password. I will refer to this user as "user"
in this document.

After removing the installation media and rebooting, login as
user. You will now be in the GNOME environment. Now:

% Go to the top right of the screen, click the down arrow, and choose
the settings icon at the bottom left of the pulldown menu.

% Select "Sharing", and turn on Sharing in general and "Remote Login"
specifically.

% Logout by clicking the down arrow again, choosing your user name,
and clicking Logout. From now on, we will be working remotely.

% On your local machine (not the one on which you're installing Fedora
Core 24), add the machine's IP address to /etc/hosts something like
this:

192.168.0.3 brighton

This will let you refer to the machine as "brighton" instead of having
to type out the IP address each time. Of course, make sure you use the
machine's actual IP address, which probably won't be 192.168.0.3 in
your case.

% "ssh user@brighton" to login remotely

% "sudo su" to become root

% do this so you can become root passwordlessly (will need this later):

echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel

% Because we will be disabling NetworkManager, we will need to run
dhclient manually (later)

echo "sudo dhclient" > ~user/startup-nox.sh

% This dnf command removes pretty much everything that can safely be
removed (you may see some harmless errors).

sudo dnf remove audit gssproxy alsa-utils 'gvfs*' rtkit "gnome*" "evolution*"

% reboot to bring up the system without these daemons running (you
will need to go local to boot "fedora" (not recovery mode) and type in
your disk encryption password

shutdown -r now

% you will come up a "localhost login" or similar prompt, not a
windows environment

% "ssh user@brighton" and "sudo su" again

% There are still several daemons running but we can stop and disable
them with systemctl

% INFO: you can use "systemctl -t service | fgrep 'loaded active running'" 
to see which services are still running

% To disable and stop most of these services:

systemctl disable abrtd abrt-oops abrt-xorg avahi-daemon chronyd firewalld mcelog ModemManager NetworkManager-dispatcher NetworkManager rngd systemd-udevd systemd-logind systemd-journald avahi-daemon.socket systemd-udevd-control.socket systemd-udevd-kernel.socket systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket

% Run the above command again, but replacing "disable" with "stop":

systemctl stop abrtd abrt-oops abrt-xorg avahi-daemon chronyd firewalld mcelog ModemManager NetworkManager-dispatcher NetworkManager rngd systemd-udevd systemd-logind systemd-journald avahi-daemon.socket systemd-udevd-control.socket systemd-udevd-kernel.socket systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket


% NOTE: do NOT try to disable (or remove the packages that contain)
any of: "dbus", "lvm2-lvmetad", "polkit", "getty",
"user@*.service". Doing so may break things severely.

% NOTE: if you remove NetworkManager (as I do above), you will need to
run dhclient yourself (which is why we create the startup-nox.csh
file). You may prefer to let NetworkManager continue running

% Manually remove /etc/resolv.conf which is now a broken symlink
(dhclient will fill in the right values)

sudo rm /etc/resolv.conf

% INFO: use "ps -ef | fgrep -v '['" to see the few remaining
(nonbracketed) processes. You cannot safely kill or remove any of these
(including "(sd-pam)")

% reboot again to make sure the system comes up cleanly ("shutdown -r
now"); as before, you will have to choose to boot into regular fedora
and type in your disk encryption password.

% Once you see the "localhost login:" prompt, login and "sh ~/startup-nox.sh"

% You can then return to remote access

% You can now install many things, including fvwm2

: we first install a couple of repos

sudo dnf install --allowerasing --best http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

sudo dnf install --allowerasing --best ImageMagick OpenThreads PySolFC SDL-devel alpine aspell audacity bind c++-gtk-utils-gtk2-devel community-mysql community-mysql-server dosbox dosemu elinks emacs enscript esniper expect feh ffmpeg ftp fuse-encfs fvwm gd gd-devel getmail glade glade-devel glib2 gnumeric gnuplot gpm graphviz gtk+extra-devel gtk2 gtk2-devel gtk3-devel html2ps lynx mencoder moreutils-parallel mplayer mrtg nagios nagios-plugins nano ncftp openrdate perl-CPAN php-mysqlnd pidgin postgresql postgresql-server qgis qhull rdesktop recoll rsyslog rxvt samba screen snownews stella stellarium tcsh tigervnc tk unrtf util-linux-user vice vino vlc xdotool xemacs xemacs-packages-extra-el xinetd xorg-x11-apps xpdf xsane xteddy xterm xv yum yum-utils zlib zlib-devel zlib-static mod_ldap mod_dnssd tor tor-arm-gui tor-arm onionshare privoxy

: this is just for me, you probably wont need or use it (same command
: as above with "install" replaced by "download --source"

mkdir /root/dnf-sources
cd /root/dnf-sources

dnf list installed | perl -anle 'unless ($F[0]=~/^(Last|Installed|)$/) {print $F[0]}' | sort | uniq | xargs dnf download --source

%% TODO: above does NOT apparently download dependency sources

% initialize postgresql

postgresql-setup --initdb

% enable new services we want ("systemctl list-unit-files" for list)

systemctl enable postgresql mysqld nagios dnsmasq httpd

: and then start these services

systemctl start postgresql mysqld nagios dnsmasq httpd

% import postgres data

: on current machine
pg_dumpall > pgsql-super-dump.txt
: rsync over to brighton (not shown)
: on brighton
sudo -u postgres psql < /tmp/pgsql-super-dump.txt
: "psql -d main" should now work as "user"

% import mysql data

: on current machine
mysqldump --all-databases > mysql-super-dump.txt
: rsync over to brighton (not shown)
sudo mysql < /tmp/mysql-super-dump.txt

%% TODO: mysql, even with dump above, does not appear to have same
users; however "mysql -u root" works as user

% If you want to vnc in and your vnc client doesn't support encrypted
connections:

gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino authentication-methods "['vnc']"
: replace "mypassword" with whatever password you'd like to use
gsettings set org.gnome.Vino vnc-password `echo -n "mypassword"|base64`


% Edit your .xinitrc file to set size correctly, to run vino-server
(if you want to vnc in), and to start fvwm2:

xrandr --size 1024x768
/usr/libexec/vino-server &
exec fvwm2

% if you're using an older .fvwm2rc file and want to continue using
it, this may be helpful:

sudo mkdir /usr/lib/X11
sudo ln -s /usr/libexec/fvwm/2.6.6 /usr/lib/X11/fvwm2

% other helpful symlinks if you're using older software or programs
that rely on a specific path:

sudo ln -s /bin/php /usr/local/bin/

% OK to rsync over /etc/httpd/conf and /etc/httpd/conf.d but not other
httpd related files. Comment out any lines like (use "apachectl
configtest" to find these):

# LoadModule authn_file_module modules/mod_authn_file.so
# LoadModule authn_alias_module modules/mod_authn_alias.so
# LoadModule authn_anon_module modules/mod_authn_anon.so
# LoadModule authn_dbm_module modules/mod_authn_dbm.so
# LoadModule authn_default_module modules/mod_authn_default.so

# LoadModule authz_host_module modules/mod_authz_host.so
# LoadModule authz_user_module modules/mod_authz_user.so
# LoadModule authz_owner_module modules/mod_authz_owner.so
# LoadModule authz_groupfile_module modules/mod_authz_groupfile.so
# LoadModule authz_dbm_module modules/mod_authz_dbm.so
# LoadModule authz_default_module modules/mod_authz_default.so

# LoadModule disk_cache_module modules/mod_disk_cache.so

% In /etc/httpd/conf.d, remove (or move to DISABLED subdir) mod_dnssd.conf

: remove -n for production
\rsync -avxn /etc/httpd/conf /etc/httpd/conf.d root@brighton:/etc/httpd/

% Reboot once again, login, run "sh startup-nox.csh" and "xinit &"

%% TODO: chsh tcsh

%% TODO: copy my .fvwm2rc file over into this dir after I get it
working right on brighton live editing

%% TODO: post this to wp with a link to github; google doesn't index
github well

%% TODO: passwordless cross machine ssh (and thus rsync)

%% TODO: get dnsmasq working

%% TODO: get local httpd working

%% TODO: create ~/brighton-procs.txt for what's allowed to run on
brighton for bc-daemon-checker2.pl (and update .crontab to run this)

%% TODO: make sure bcgit alias works


