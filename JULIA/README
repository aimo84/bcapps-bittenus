[3*a + b for a in 1:10, b in 1:10]

import Pkg;
Pkg.add("Plots"); Pkg.add("CSV"); Pkg.add("GLM"); Pkg.add("DataFrames");
Pkg.add("Polynomials"); Pkg.add("StatsBase");

import Pkg, Plots, CSV, GLM, DataFrames, Polynomials, StatsBase;

mars = CSV.read("/tmp/mars2.txt", header = false);

decs = mars[:,1];

count = range(-1, 1, step=2/(length(decs)-1));

t1355 = Polynomials.fit(count, decs, 5);

function splitArray(arr, n)

   ret = [];
   len = length(arr);
   clen = floor(len/n);
   st = 1;

   while st < len

      en = convert(Int, st + clen - 1)
      if en > len en = len end
      push!(ret, arr[st:en])
      st = convert(Int, st + clen)
   end

   ret

end

function list2NormalPoly(arr, deg)

   count = range(-1, 1, step=2/(length(arr)-1));
   poly = Polynomials.fit(count, arr, deg);
   map(poly, count) - arr

end

t1437 = splitArray(decs, 99);

t1445 = map(x -> list2NormalPoly(x, 3), t1437)












# t1355 = Polynomials.fit(count, decs, 10);



Plots.plot(decs);

Plots.plot(count, decs)

t1352 = Polynomials.fit(count, decs, 3);

Plots.plot!(t1352, -1, 1)



function f(e,n) 2*(e-1)/(n-1)-1 end

# count = range(1, length(decs), step=1);

count = range(-1, 1, step=2/(length(decs)-1));

t1347 = Polynomials.fit(count, decs, 2);

Plots.plot!(t1347, -1, 1)

t1358 = Polynomials.fit(count, decs, 4);

t1402 = Polynomials.fit(count, decs, 10)

Plots.plot(count, decs, label = false)
Plots.plot!(t1358, -1, 1, label = false)

map(t1358, count) - decs

map(t1358, count) - decs

maximum(map(abs, map(t1358, count) - decs))

maximum(map(abs, map(t1402, count) - decs))

maximum(map(abs, map(t1347, count) - decs))

# work below for mars cent

import Pkg, Plots, CSV, GLM, DataFrames, Polynomials, StatsBase;

marscent = CSV.read("/tmp/marscent2.txt", header = false);



















julia> for i=1:2 for j=2:4 println(i*j) end end

julia> g = x -> x+2

f(x,y) = 2x+y

import CSV



