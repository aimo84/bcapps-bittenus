/*

Notes:

  - args command converts matrices to lists

  - listp tests if something a list

  - listarray gives the values of a hash

  - arrayinfo gives the keys of a hash (but in a funky way)

  - draw2d(points(array))

Scratch:

(%i61) sublist(args(matt), lambda([x], x[2] = Mexico));

(%i63) makelist(i[5], i, sublist(args(matt), lambda([x], x[2] = Mexico)));

(%i23) plot2d([[discrete, days, deaths["Canada"]], [discrete, days, deaths["US"]]]);

(%i70) plot2d([[discrete, days, deaths["World"]], [discrete, days, t1238]]);

*/

<formulas>

load("/home/user/BCGIT/bclib.mac");

/* TODO: split this into a 1d and 2d case AND allow for options after
first one to be passed directly to plot2d */

listplot(l) := plot2d([discrete, makelist(i, i, 1, length(l)), l]);

/* above this line, library and other non-specific functions/loads */

fname : openr("/home/user/covid-19/data/countries-aggregated.csv");
matt : args(read_matrix(fname, 'comma))$
close(fname);

fname : openr("/home/user/covid-19/data/worldwide-aggregated.csv");
mat2 : args(read_matrix(fname, 'comma))$
close(fname);

/* make deaths(i) the empty array for each country i */

makelist(deaths[bc_list2string(i[2])] : [], i, matt)$

makelist(push(i[5], deaths[bc_list2string(i[2])]), i, matt)$

makelist(deaths[i] : reverse(deaths[i]), i, bc_keys(deaths))$

deaths["World"] : sublist(makelist(i[4], i, mat2), lambda([x], x>0));

/******* TODO: local and block for ret may not be working properly *****/

/******* TODO: function linear_regression() already exists ******/

/*

linearRegression takes an associative array with the following keys:

x = list of x vals
y = list of y vals

and returns an associative array whose keys are:

f = the best fit function (a linear function)

yest = a list of estimated y values based on f

msqe = sum of squares of differences, square rooted, all divided by size of x

mabs = sum of the absolute value of differences divided by size of x

*/

linearRegression(obj) := block([ret, a, b, x, y, f],
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], y = a*x + b, [a,b]),
  f : lambda([x], subst(ret["est"], a*x + b)),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

logLinearRegression(obj) := block([ret, a, b, x, y, f],
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], log(y) = a*x + b, [a,b]),
  f : lambda([x], subst(ret["est"], exp(a*x + b))),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

expRegression(obj) := block([ret, a, b, x, y, f], 
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], y = exp(a*x + b), [a,b],
    initial=[0,1]),
  f : lambda([x], subst(ret["est"], exp(a*x + b))),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

fname : openr("/home/user/covid-19/data/reference.csv");
matpop : args(read_matrix(fname, 'comma))$
close(fname);
makelist(population[bc_list2string(i[11])] : i[12], i, matpop);

countries: array_keys(deaths);


</formulas>

(* work here starts 21 May 2020 *)

flatten1[list] := xreduce('append, list);

// listcr([ ... ], x, 1, 10, y, 1, 20, z, 1, 20)

meanDeathsDays[country, n] := if numberp(population[country]) then 
 n(mean(lastn(differences(deaths[country]), n))/population[country]*1000000) else 0;

avgDeathsDaysMN[country, m, n] := if numberp(population[country]) then 
n(mean(makelist(differences(deaths[country])[i], i, m, n)))/population[country]*1000000 else 0;

flattenAndZero(list) := if length(list) = 0 then 0 else list[1];

deathsOverDays[country, m, n] :=
   flattenAndZero(errcatch(deaths[country][n] - deaths[country][m]));

transDebug(any) := print(any), any;


makelist(
  makelist(
    makelist(
      deathsOverDays[transdebug(country), i, j], country, countries
      ), j, i+1, 120
    ), i, 1, 119
  )$


makelist(
  makelist(
    makelist(
      [print([country, i, j]), country, countries
      ), j, i+1, 120
    ), i, 1, 119
  )$







sort(makelist([meanDeathsDays[i, 8], i], i, countries));

// length is 120

// WRONG: makelist([i, j], i, 1, 10, j, i, 10);

makelist(makelist([i, j], j, i+1, 10), i, 1, 9);

xreduce('append, makelist(makelist([i, j], j, i+1, 10), i, 1, 9));

xreduce('append, makelist(makelist([i, j], j, i+1, 120), i, 1, 119));

xreduce('append, makelist(
     makelist(makelist([country, i, j], j, i+1, 120), i, 1, 119),
     country, countries));

t1335 : xreduce('append,
  xreduce('append, makelist(
     makelist(makelist([country, i, j], j, i+1, 120), i, 1, 119),
     country, countries)))$

t1336 : xreduce('append,
  xreduce('append, makelist(
     makelist(makelist([avgDeathsDaysMN[country, j, i], country, i, j], j, i+1, 120), i, 1, 119),
     country, countries)))$

samp : ["US"];

t1337: makelist(
  makelist(
    makelist(
      [avgDeathsDaysMN[country, i, j], country, i, j], country, samp
      ), j, i+1, 120
    ), i, 1, 119
  );


t1409: makelist(
  makelist(
    makelist(
      [avgDeathsDaysMN[country, i, j], country, i, j], country, countries
      ), j, i+1, 120
    ), i, 1, 119
  );














(* work here starts 23 Apr 2020 *)

t1522 : transpose(matrix(days, deaths["World"]));

t1526 : linear_regression(t1522);

t1528(n) := take_inference('adc,
linear_regression(lastn(transpose(matrix(days, deaths["World"])),
n)));

makelist(t1528(n), n, 3, length(t1522));

(* 18 is the max *)

t1534: lastn(t1522, 18);

(*          | b_estimation = [- 445311.1585827284, 6840.956656346738]   *)

t1537 : firstn(t1522, length(t1522)-7);

t1538(n) := take_inference('adc, linear_regression(lastn(t1537, n)));

makelist(t1538(n), n, 3, length(t1537));

plot2d([discrete, makelist(n, n, 3, length(t1537)), makelist(t1538(n),
n, 3, length(t1537))]);

(* 11 is best *)

t1545: lastn(t1537, 11);

t1546(x) := -412823.6363636404 + 6426.845454545459*x;











(* work here starts 22 Apr 2020, evening *)

t1803["x"] : days;
t1803["y"] : deaths["US"];

t1803["x"] : sublist(days, lambda([x], deaths["US"][x] > 0));
t1803["y"] : sublist(deaths["US"], lambda([x], x > 0));

plot2d([
  [discrete, t1803["x"], t1803["y"]],
  [discrete, t1803["x"], linearRegression(t1803)["yest"]],
  [discrete, t1803["x"], logLinearRegression(t1803)["yest"]],
  [discrete, t1803["x"], expRegression(t1803)["yest"]]
  ]);


plot2d([
  [discrete, t1803["x"], t1803["y"]],
  [discrete, t1803["x"], linearRegression(t1803)["yest"]],
  [discrete, t1803["x"], logLinearRegression(t1803)["yest"]],
  [discrete, t1803["x"], expRegression(t1803)["yest"]]
  ], logy);

plot2d([
  [discrete, t1803["x"], t1803["y"]],
  [discrete, t1803["x"], expRegression(t1803)["yest"]]
  ], logy);


plot2d([
  [discrete, t1803["x"], t1803["y"]],
  [discrete, t1803["x"], expRegression(t1803)["yest"]]
  ]);



t1803["x"] : [1,2,3];
t1803["y"] : [3,2,1];

linearRegression(t1803);

linearRegression(

(* work here starts 22 Apr 2020 *)

t1219 : transpose(matrix(days, deaths["World"]));

t1236: lsquares_estimates(t1219, [x, y], y = a*x + b, [a,b]);

t1237(x) := subst(t1236, a*x + b);

t1238 : makelist(t1237(i), i, 1, length(days));

plot2d([[discrete, days, deaths["World"]], [discrete, days, t1238]]);

lsquares_mse(t1219, [x, y], y = t1237(x));

t1321: lsquares_residuals(t1219, [x, y], y = t1237(x), []);

t1327: sum(t1321[i]^2, i, 1, length(t1321))/length(t1321);




t1253: lsquares_estimates(lastn(t1219, 20), [x, y], y = a*x + b, [a,b]);

t1254(x) := subst(t1253, a*x + b);

t1255 : makelist(t1254(i), i, 1, length(days));

plot2d([[discrete, days, deaths["World"]], [discrete, days, t1255]]);


t1257: lsquares_estimates(t1219, [x, y], y = exp(a*x+b), [a,b], initial=[0,1]);

t1334(x) := subst(t1257, exp(a*x+b));

t1335: makelist(t1334(i), i, 1, length(days));

plot2d([[discrete, days, deaths["World"]], [discrete, days, t1335]]);


t1338: lsquares_estimates(t1219, [x, y], log(y) = a*x+b, [a,b]);

t1340(x) := subst(t1338, exp(a*x+b));

t1341: makelist(t1340(i), i, 1, length(days));

plot2d([[discrete, days, deaths["World"]], [discrete, days, t1341]]);

plot2d([
   [discrete, days, deaths["World"]],
   [discrete, days, t1341],
   [discrete, days, t1238],
   [discrete, days, t1335],
   [discrete, days, t1255]
   ]);
   







plot2d([discrete, days, deaths]);
plot2d([discrete, days, deaths], logy);
draw2d(points(deaths));

poly(n) := sum(a[i]*x^i, i, 0, n);

coefflist(n) := makelist(a[i], i, 0, n);

t1047 : transpose(matrix(days,deaths));

f1555(x) := x[2] > 0;

t1609 : map(flatten, transpose(sublist(args(t1047), f1555)));

t1615 : float(lsquares_estimates(t1609, [x, y], log(y) = a*x + b, [a,b]));

f1618(x) := subst(t1615, exp(a*x+b));

t1625 : float(lsquares_estimates(t1609, [x, y], y = exp(a*x + b), [a,b]));

/* plot2d([f1618(x), fdeaths(x)], [x, 12, 104], logy); */

t1615 : float(lsquares_estimates(lastn(t1609, 7), [x, y], log(y) = a*x + b, [a,b]));

t1548 : lsquares_estimates(t1047, [x, y], log(y) = a*x + b, [a,b]);

t1103 : lsquares_estimates(t1047, [x, y], y = poly(2), coefflist(2));

lsquares_residuals(t1047, [x, y], y = poly(2), coefflist(2));

lsquares_residuals(t1047, [x, y], poly(2), t1103);

subst(coefflist(n), t1103, poly(n));

sublis(t1103, poly(2));

f1133(x) := subst(t1103, poly(2));

plot2d(f1133(x), [x, 1, length(deaths)]);

plot2d([f1133(x), fdeaths(x)], [x, 1, length(deaths)]);

t1137 : lsquares_estimates(t1047, [x, y], y = poly(4), coefflist(4));

f1137(x) := subst(t1137, poly(4));

plot2d([f1137(x), fdeaths(x)], [x, 1, length(deaths)]);

/* lambda ([i, j], ...) does exist!!! */

/* block ([], expr1, ..., if (a > 10) then return(a), ..., exprn) */

/* TODO: modules */

t1057 : lsquares_estimates(t1047, [x, y], y = a + b*x, [a,b,c,d]);

list2poly(list, n) := block([poly, coeffs, indexs, f, x, y],
  poly : sum(a[i]*x^i, i, 0, n),
  coeffs: makelist(a[i], i, 0,n),
  indexs: makelist(i, i, 1, length(list)),
  f(z) := subst(z, x,
    subst(
      lsquares_estimates(transpose(matrix(indexs, list)), [x, y], y = poly, coeffs),
      poly)),
return(f)
    )$


f(y) := subst(y, x, list2poly([1, 3, 5, 8], 2));

plot2d([discrete, makelist(i, i, 1, length(ddeaths)), ddeaths]);

transpose(matrix(days,deaths))

ldeaths : log(delete(0, deaths));

/* float() is like N[] */

float(ldeaths);

/*

t1051 : matrix(firstn(days, 64), firstn(deaths, 64));

cspline(deaths);
fdeaths(x) := ''%;

lsquares_estimates(deaths, x, a + b*x + c*x^2 + d*x^3, [a,b,c,d]);

makelist([days[i], deaths[i]], i, 1, length(deaths));

*/

/* set_plot_option([png_file, "/tmp/foo1652.png"]); */
plot2d([discrete, days, deaths], logy, [png_file, "/tmp/foo1654.png"]);

/*

plot2d(f(x), [x, 1, length(deaths)], logy);

draw2d(points(ddeaths));

plot2d([discrete, days, deaths]);

plot2d([discrete, days, deaths], logy);

*/








