(*

WRITEUP:

Let s[n, k, m] represent the probability you're in the state where:

  - there have been n tosses total

  - there have been k heads

  - you have m money

Possibilities for the next state:

  - if k > n/2 you choose heads. Then:

    - heads comes up (p) putting you in state s[n+1, k+1, m+1]

    - tails comes up (1-p) putting you in state s[n+1, k, m-1]

 - if k < n/2 you choose tails. Then:

    - heads comes up (p) putting you in state s[n+1, k+1, m-1]

    - tails comes up (1-p) putting you in state s[n+1, k, m+1]

 - if k = n/2 you enter one of the two conditions above randomly

Possibilities for previous state:

  - heads just came up (probability p) so previous state was s[n-1, k-1, ?]:

    - If (k-1) > (n-1)/2 you chose heads and were s[n-1, k-1, m-1]

    - If (k-1) < (n-1)/2 you chose tails and were s[n-1, k-1, m+1]

    - If k-1 == (n-1)/2 you chose randomly between the two choices above

  - tails just came up (probability 1-p) so previous state was s[n-1, k, ?]:

    - If k > (n-1)/2 you chose heads and were s[n-1, k, m+1]

    - If k < (n-1)/2 you chose tails and were s[n-1, k, m-1]

    - If k == n/2 you randomly chose between the two choices above

f[0,0,0] = 1

f[0, x_, y_] = 0

f1[n_, k_, m_] = If[(k-1) > (n-1)/2, f[n-1, k-1, m-1], 0]

f2[n_, k_, m_] = If[(k-1) < (n-1)/2, f[n-1, k-1, m+1], 0]

f3[n_, k_, m_] = If[(k-1)/2 == (n-1)/2, (f[n-1, k-1, m-1] + f[n-1,
k-1, m+1])/2, 0]





iter[n_, k_, m_] := If[
 k > n/2, p*s[n+1, k+1, m+1] + (1-p)*s[n+1, k, m-1],
 If[k < n/2, p*s[n+1, k+1, m-1] + (1-p)*s[n+1, k, m+1],
    1/2*(p*s[n+1, k+1, m+1] + (1-p)*s[n+1, k, m-1]) +
    1/2*(p*s[n+1, k+1, m-1] + (1-p)*s[n+1, k, m+1])]]




Let p be the (unknown) probability that coin comes up heads.

After n flips, the binomial distribution clearly tells us the probability of more than 1/2 heads is: `1 - BetaRegularized[1 - p, n/2, 1 + n/2]` where `BetaRegularized` is the well known regularized incomplete beta function with two parameters:

https://reference.wolfram.com/language/ref/BetaRegularized.html

(see https://github.com/barrycarter/bcapps/tree/master/REDDIT/yfmk0y.txt for how I used Mathematica to compute all of this)

For convenience, let's call that f[n,p]. For any pair of flips, there are exactly 4 distinct possibilities:

  - You guess heads (f[n,p]) and heads comes up (p), you win $1

  - You guess heads (f[n,p]) and tails comes up (1-p), you lose $1

  - You guess tails (1-f[n,p]) and heads comes up (p), you lose $1

  - You guess tails (1-f[n,p]) and tails comes up (1-p), you win $1

So your gain function is:

f[n,p]*p*1 + 

P(x>=0.5) requires 

IGNORING 50/50


*)



(* the math *)

(* 

The chance of n/2 or more heads is 1-CDF[BinomialDistribution[n,p]][n/2]

We simplify knowing n > 0 and pretending in is even, yielding

1 - BetaRegularized[1 - p, n/2, 1 + n/2]


*)

f[n_, p_] = Simplify[1-CDF[BinomialDistribution[n,p]][n/2], 
{n>0, Mod[n,2] == 0}]



`z > (1/2 - n*p)/Sqrt[-(n*(-1 + p)*p)]` (using Mathematica's InputForm since I can't seem to get LaTeX working here)
