This *text* file attempts to define the function f(x)=x+sin(x) in various
languages as a test; to use, run the appropriate interpreter and
cut/paste the code

f(x) returns x+sin(x)

g(x,y) returns the list (sin(x), cos(y))

notes on how to define hashses as well

Ruby
====

def f(x) x+Math.sin(x) end
print f(1),"\n"

def g(x,y) [Math.sin(x),Math.cos(y)] end
print g(1,2),"\n"

grades = { "Jane Doe" => 10, "Jim Doe" => 6 }
grades["Dorothy Doe"] to access

Perl
====

sub f {my($x) = @_; $x+sin($x);}
print f(1),"\n";

sub g {my($x,$y) = @_; [sin($x), cos($y)]}
print g(1,2),"\n";

%grades = ("Jane Doe" => 10, "Jim Doe" => 6)
$grades{key} to access

JavaScript
==========

function f(x) {return x+Math.sin(x);}
f(1);

function g(x,y) {return [Math.sin(x), Math.cos(y)];}
g(1,2);

var dict = {FirstName: "Chris", "one": 1, 1: "some value"}

dict["FirstName"] to access

Mathematica
===========

f[x_] = x+Sin[x]
N[f[1]]

g[x_,y_] = {Sin[x], Cos[y]}
N[g[1,2]]

TCL
===

proc f {x} {expr $x + sin($x)}
f 1

THIS DOES NOT WORK!!!!
proc g {x y} {expr [list sin($x) cos($y)]}
g 1 2


Lua
===

function f(x) return x+math.sin(x) end
print(f(1))

function g(x,y) return math.sin(x), math.cos(y) end
print(g(1,2))

dictionary = {hello = "used to express a greeting ", world = "the earth or globe, considered as a planet"}

print(dictionary["hello"], dictionary["world"])

Python
======

import math

def f(x):
 return x + math.sin(x) 

f(1)

def g(x,y):
 return [math.sin(x), math.cos(y)]

g(1,2)

food = {"ham" : "yes", "egg" : "yes", "spam" : "no" }

food["spam"]

PHP
===

function f($x) {return $x+sin($x);}
echo f(1),"\n";

function g($x,$y) {return array(sin($x), cos($y));}
print_r(g(1,2));



R
=

f <- function(x) {return(x+sin(x))}
f(1)

g <- function(x,y) {return(list(sin(x), cos(y)))}
g(1,2)



END HERE?

NOT DOING: SQL

TODO: C, Java, Go + other compiled languages, LISP/Schema/emacs-lisp?, Swift?

DEFFN?
