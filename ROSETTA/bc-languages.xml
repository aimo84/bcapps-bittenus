# XML like (but not true XML) description of various computer
# programming languages used by bc-lang-convert.pl

# fields are:
#
# extension: the file extension associated with this language
# prefix: programs in this language must start with this
# postfix: programs in this language must end with this
# fdef: the template for a function definition in this language
# pdef: the template for printing the results of a function call
# comment: single line comment
# mcomment: multi-line comment


# macros are:

# NOTE: <VARS> are the function's argument's names and <ARGS> are the
# values assigned to these arguments during testing

# <FNAME>: function name
# <VARS>: arguments to function, as comma separated list (like "x,y,z")
# <CODE>: code generated by bc-lang-convert.pl
# <ARGS>: arguments to the function for testing (like "1,2,3")
# <COMMENT>: the contents of a comment

# TODO: think there are better pdefs for some of these languages

<language name="ruby">
<extension>rb</extension>
<fdef>def <FNAME>(<VARS>) <CODE> end</fdef>
<pdef>print <FNAME>(<ARGS>)</pdef>
<comment># <COMMENT></comment>
<mcomment>
=begin

<COMMENT>

=end
</mcomment>
</language>

<language name="python">
<extension>py</extension>
<fdef>def <FNAME>(<VARS>):
 return <CODE>
</fdef>
<pdef>print(<FNAME>(<ARGS>))</pdef>
<comment># <COMMENT></comment>
# NOTE: python does not have multiline comments, this is a hack!
<mcomment>"""<COMMENT>"""</mcomment>
</language>

<language name="javascript">
<extension>js</extension>
<fdef>function <FNAME>(<VARS>) {return <CODE>;}</fdef>
<pdef>print(<FNAME>(<ARGS>));</pdef>
<comment>// <COMMENT></comment>
<mcomment>/* <COMMENT> */</mcomment>
</language>

<language name="lua">
<extension>lua</extension>
<fdef>function <FNAME>(<VARS>) return <CODE> end</fdef>
<pdef>print(<FNAME>(<ARGS>))</pdef>
<comment>-- <COMMENT></comment>
<mcomment>-- [[ <COMMENT> ]]</mcomment>
</language>








%extension = ("ruby" => "rb", "js" => "js", "lua" => "lua", "php" => "php",
 "python" => "py", "R" => "r");

# prefix and postfix to function code

$prefix{python} = "import math;";
$prefix{php} = "<?";
$postfix{php} = "?>";

# what a function looks like in various languages where:

# <FNAME> is the function name
# <VARS> is the comma-separated arguments (TODO: always csv?)
# <DVARS> is the dollar-sign-prefixed comma-separate arguments
# <CODE> is the generated code

my(%fdef);

$fdef{ruby} = "def <FNAME>(<VARS>) <CODE> end";
$fdef{js} = "function <FNAME>(<VARS>) {return <CODE>;}";
$fdef{lua} = "function <FNAME>(<VARS>) return <CODE> end";
$fdef{R} = "<FNAME> <- function(<VARS>) {return(<CODE>)}";

# python requires "import math";
$fdef{python} = "def <FNAME>(<VARS>):
 return <CODE>
";

# PHP requires special vars and must have "<?" and "?>" tags, nonstandard
$fdef{php} = "function <FNAME>(<DVARS>) {return <CODE>;}";

# how to print/test variables where:
# <FNAME> is function name
# <ARGS> is comma-separated args (but will they always be?)

my(%pdef);

$pdef{ruby} = "print <FNAME>(<ARGS>)";
$pdef{js} = "print(<FNAME>(<ARGS>));";
$pdef{php} = "print_r(<FNAME>(<ARGS>));";
$pdef{lua} = "print(<FNAME>(<ARGS>))";
$pdef{python} = "print(<FNAME>(<ARGS>))";
$pdef{R} = "print(<FNAME>(<ARGS>))";
