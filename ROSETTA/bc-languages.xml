# XML like (but not true XML) description of various computer
# programming languages used by bc-lang-convert.pl

# fields are:
#
# extension: the file extension associated with this language
# prefix: programs in this language must start with this
# postfix: programs in this language must end with this
# fdef: the template for a function definition in this language
# pdef: the template for printing the results of a function call
# math: The "math" object in this language ("Math", "math", or "" = not given)
# comment: single line comment
# mcomment: multi-line comment
# run: how to run a program

# macros are:

# NOTE: <vars> are the function's argument's names and <args> are the
# values assigned to these arguments during testing

# <fname>: function name
# <vars>: arguments to function, as comma separated list (like "x,y,z")
# <dvars>: argument to function, preceded by $ (for PHP) (like "$x,$y,$z")
# <code>: code generated by bc-lang-convert.pl
# <args>: arguments to the function for testing (like "1,2,3")
# <comment>: the contents of a comment
# <file>: file containing code

# TODO: think there are better pdefs for some of these languages

<language name="ruby">
<extension>rb</extension>
<fdef>def <fname>(<vars>) <code> end</fdef>
<pdef>print <fname>(<args>)</pdef>
<math>Math</math>
<comment># <comment></comment>
<mcomment>
=begin

<comment>

=end
</mcomment>
<run>ruby <file></run>
</language>

<language name="python">
<extension>py</extension>
<fdef>def <fname>(<vars>):
 return <code>
</fdef>
<pdef>print(<fname>(<args>))</pdef>
# really shouldn't need this "prefix"
<prefix>import math;</prefix>
<math>math</math>
<comment># <comment></comment>
# NOTE: python does not have multiline comments, this is a hack!
<mcomment>"""<comment>"""</mcomment>
<run>python <file></run>
</language>

<language name="javascript">
<extension>js</extension>
<fdef>function <fname>(<vars>) {return <code>;}</fdef>
<pdef>print(<fname>(<args>));</pdef>
<math>Math</math>
<comment>// <comment></comment>
<mcomment>/* <comment> */</mcomment>
<run>js <file></run>
</language>

<language name="lua">
<extension>lua</extension>
<fdef>function <fname>(<vars>) return <code> end</fdef>
<pdef>print(<fname>(<args>))</pdef>
<math>math</math>
<comment>-- <comment></comment>
<mcomment>-- [[ <comment> ]]</mcomment>
<run>lua <file></run>
</language>

<language name="php">
<extension>php</extension>
<fdef>function <fname>(<dvars>) {return <code>;}</fdef>
<pdef>print_r(<fname>(<args>));</pdef>
# TODO: not including "#" style comment for simplicity for now
<comment>// <comment></comment>
<mcomment>/* <comment> */</mcomment>
# prefix/postfix required for standard "php codefile" run
# TODO: find php options that dont require prefix/postfix?
<prefix><?</prefix>
<postfix>?></postfix>
<run>php <file></run>
</language>

<language name="R">
<extension>r</extension>
<fdef><fname> <- function(<vars>) {return(<code>)}</fdef>
<pdef>print(<fname>(<args>))</pdef>
<comment># <comment></comment>
<run>R --no-save < <file></run>
</language>

# TODO: perl and Mathematica (though I generate FROM Mathematica, so
# maybe pointless)

