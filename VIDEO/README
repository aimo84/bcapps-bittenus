Notes on my attempt to create "10 seasons of Full House in 10 minutes"
(video only) on youtube.com; I will likely fail and I doubt these tips
will help anyone, so this contributes to my prime directive of filling
github w/ useless crap.

TODO
====

  - montage uses first available images, which is bad so longest ep
  migrates to top left at end of film

  - Create frames larger than 1024x768?

  - Do I want changes resolutions when hitting Fuller House or squish?

  - Would it be more efficient to grab frames full screen and then
  resize using montage?

  - Don't forget Fuller House!

NOTES
=====

  - For seasons 1-8, images are 640x480, scale ratio 4:3

  - For seasons 9-10 ("Fuller House"), images are 1280x720, 16:9 ratio

  - Frame speed is 24 fps

  - Approximately 24 episodes per season but it varies (some episodes
  are "double size")

  - Doing 5x5 should work ok, so 204x153 per episode (allowing for 4x3
  pixel frame which I probably wont use); however ffmpeg encoding
  requires even height so 204x152 (with 4x8 pixel frame if needed)

COMMANDS
========

: this converts first episode of full house into 1808 thumbnails, one
: for each second (24 frames) of the show-- the thumbnails are 209x157
: so I can tile them as above (timed so I can get a general idea)

time ffmpeg -i fh101.avi -vf "select=not(mod(n\,24)), scale=204:152" -vsync vfr img_%03d.jpg

: above takes 17.704u 1.093s 0:16.72 112.3% 0+0k 0+38928io 0pf+0w

: without scaling, this is 19.588u 1.110s 0:18.56 111.4% 0+0k 0+57280io 0pf+0w

: grabbing raw frames is actually slower

: this command lets me see what the upper left of the final video will
: look like, but does not, in and of itself, have any real use to the
: final project

ffmpeg -i img_%03d.jpg test0.mp4

: when piped to shell, this links MANY but not all of the Full House
: episodes to shorter names

perl -le 'for $i (1..8) {for $j ("01".."24") {print "ln -s Full?House?${i}x$j* fh$i$j.avi"}}'

: this frameifies all episodes (after fully converting names)

\ls fh???.avi | perl -nle 'print "ffmpeg -i $_ -vf \47select=not(mod(n\\,24)), scale=204:152\47 -vsync vfr $_.%06d.jpg"' > temp.sh

: since this seems fairly parallelizeable

time parallel -j 5 < temp.sh &

: above gives 18K frames per minute (about 338K or so total needed)

: as a sample, lets montage the 1000th frames of season 1 (not using
: the 1st few frames because they tend to blank or similar)-- if this
: works, we can generalize

: the convert below pads the image to 1024x768 which is useful 

montage -background black -geometry 204x152  -tile 5x5 fh1??.avi.001000.jpg - | convert -border 2x4 - out.jpg

: lets find the largest frame number/longest show of season 1 to montage

\ls fh1??.avi.*.jpg | perl -nle '/(\d+)\.jpg$/; print $1' | sort -nr | uniq -c | less

: 1 show goes to 1858 seconds (the next longest is 1816s, and 4 more
: shows go that long, but thats really not relevant)

: since we need exactly 1858 images for each show, create blanks where needed

perl -le 'for $i ("01".."22") {for $j (0..1858) {$f=sprintf("fh1%02d.avi.%06d.jpg",$i,$j); unless (-f $f) {print "ln -s blank.jpg $f";}}}'

: lets create 1858 montage images

perl -le 'for $j (0..1858) {$f=sprintf("fh1??.avi.%06d.jpg",$j); $o=sprintf("s1f%06d.jpg",$j); print "montage -background black -geometry 204x152 -tile 5x5 $f - | convert -border 2x4 - $o"}' > temp2.sh

: do it backwards because last few images are most important to check

tac temp2.sh | parallel -j 5 &

: and now, the movie

ffmpeg -i s1f%06d.jpg season1.mp4

NOTES TO SELF
=============

These are notes to myself that are probably even more useless to you

: longest show(s) -- note that glob yields /bin/ls: Argument list too long

find . -maxdepth 1 -iname 'fh*.avi.*.jpg' | perl -nle '/(\d+)\.jpg$/; print $1' | sort -nr | uniq -c > temp3.txt

: 1858 really is longest

: shows im missing, prob due to bad symlinking

find . -maxdepth 1 -iname 'fh*.avi.1000.jpg' | perl -anle '/fh(\d+)/; print $1' | sort > temp4.txt





DISCLAIMER
==========

  - This idea isn't original: someone did it w/ Friends (in a slightly
  different way) WITH audio


