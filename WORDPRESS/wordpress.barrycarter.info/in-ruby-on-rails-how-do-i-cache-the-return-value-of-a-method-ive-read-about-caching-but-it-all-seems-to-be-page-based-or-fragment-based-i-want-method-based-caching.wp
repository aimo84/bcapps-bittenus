
ID: 25366
post_name: in-ruby-on-rails-how-do-i-cache-the-return-value-of-a-method-ive-read-about-caching-but-it-all-seems-to-be-page-based-or-fragment-based-i-want-method-based-caching
post_category: vark2
post_author: barrycarter
post_date_gmt: Mon, 21 Jun 2010 19:58:01 +0000
post_type: post 
post_status: publish
post_title: In Ruby (on Rails), how do I cache the return value of a method? I've read about caching, but it all seems to be page based or fragment based. I want method-based caching.

======================================================

(You): In Ruby (on Rails), how do I cache the return value of a method? I've read about caching, but it all seems to be page based or fragment based. I want method-based caching.

(Jay): the usual ruby practice is to use ||=, as in `def foo; @foo ||= calculate_foo; end`.

(Jay): you can then clear the cache manually by setting @foo = nil

----------------------

(Bert): The best way is to use "memoize". You can find it in the rails docs. 



Alternately, you can just use a conditional assignment. 



def foo; @bar ||= result; end



Memoize is the better option if your method has parameters, and will give the option for a force reload.



[Vark assigned category: <b>web programming</b>, <a target='_blank' href='http://wordpress.barrycarter.org/index.php/more-details-about-barry-after-vark/'>more details</a>]

