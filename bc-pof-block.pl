#!/bin/perl

# When you use "My Matches" on POF, there's no way to "block" a user
# from appearing on that screen, even if you don't meet the
# qualifications to message them. This script helps hide these users
# from you.

# Given a list of POF URLs (like
# http://www.pof.com/#!/viewprofile.aspx?profile_id=xxxxxxxx), AND the
# inner HTML of the mymatches page, creates a greasemonkey script that
# replaces thumbnails of those ids with blanks.

# TODO: requiring the inner HTML of my matches is painful; should be
# able to create a GM script without it

# Reference: this is how the 21st match on the list looks like (user
# id replaced by pid, URL to image partly replaced by string.jpg)

# <a href="http://www.pof.com/viewprofile.aspx?profile_id=pid" class="mi" onclick="_gaq.push(['_trackEvent', 'viewmatches', 'localmatches', 'match_21']);"><img src="pof-inner_files/string.jpg" border="0"></a>

require "/usr/local/lib/bclib.pl";

# file where existing bad JPG URLs are kept (autogenerated)
$badfile = "/home/barrycarter/pof-autogenerated-bad-do-not-edit.txt";

# and the list of users to block
@block = split(/\n/,read_file("/home/barrycarter/pof-bad.txt"));

# create hash of ids to block
for $i (@block) {
  # get the id
  $i=~s/^.*\=//;
  $block{$i} = 1;
}

# On "My Matches", do "Frame/Save Source" or similar to get this
# can't curl it since it requires login
# "viewmatches.aspx.html" is the default save for firefox
$inner = read_file("/home/barrycarter/Download/viewmatches.aspx.html");

# split into chunks
while ($inner=~s%profile_id=(.*?)" class="mi" onclick=".*?"><img src=".*?_files/([^"]*?[\d\.]+)\.jpg"%%) {
  debug("CHUNK STYLE: $&");
  my($id,$url) = ($1,$2);
  # if its not an id we want to block ignore it
  unless ($block{$id}) {next;}
  debug("ID: $id, URL: $url");
  # this only works for ones in current viewmatches.aspx.html
  $id{$url} = $id;
  push(@newjpgs,$url);
}

# write the new jpegs to a permafile
append_file(join("\n",@newjpgs)."\n",$badfile);

# sort and remove dupes (in place)
system("sort $badfile -u -o $badfile");

# and reread
@allbad = split(/\n/, read_file($badfile));

# and turn into GM lines
# have no idea why I need .2.jpg and .3.jpg here, but I do
for $i (@allbad) {
  # ignore blanks
  unless ($i) {next;}
  debug("I: $i, ID: $id{$i}");
  my(@list) = "// ID: $id{$i}";
  # apparently [0-9] doesnt work
 push(@list,"str=str.replace(/$i.jpg/gi,'$i-blocked.jpg')");
  for $j (0..9) {
    push(@list,"str=str.replace(/$i.$j.jpg/gi,'$i-blocked.jpg')");
  }
  $i = join("\n",@list)."\n";
}

# join them
$allbad = join("\n",@allbad);

# create the script
$str = << "MARK";
// ==UserScript==
// \@name pofthing2
// \@namespace http://barrycarter.info
// \@description Blocks POF user thumbnails
// \@include *pof*
// ==/UserScript==

str = document.documentElement.innerHTML
$allbad
document.documentElement.innerHTML = str
MARK
;

# write to file + redirect firefox (this just "the dir of the day"
# when I wrote this)

write_file($str,"/home/barrycarter/20130420/pof.user.js");

# it may be impossible to direct someone to a GM script directly, so
# this goes to the dir instead

system("/root/build/firefox/firefox -remote 'openURL(file:///home/barrycarter/20130420/)'");


