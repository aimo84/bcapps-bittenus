load("interpol");
load ("lsquares");
load("descriptive");
load("stats");
stringdisp: true;

bc_list2string(l) := if listp(l) then apply(sconcat, l) else
 apply(sconcat, [l]);

/* per https://def.fe.up.pt/pipermail/maxima-discuss/2013/046236.html a version of arrayinfo that does NOT quote its arguments */

arrayinfo2(l) := apply(arrayinfo, [l]);

/* the keys of an associative array */

bc_keys(l) := flatten(rest(arrayinfo2(l), 2));

/* add an index to an existing list */

bc_addIndex(l) := makelist([i, l[i]], i, 1, length(l));

/* the differences of a list */

differences(list) := makelist(list[i] - list[i-1], i, 2, length(list));


/*

linearRegression takes an associative array with the following keys:

x = list of x vals
y = list of y vals

and returns an associative array whose keys are:

f = the best fit function (a linear function)

yest = a list of estimated y values based on f

msqe = sum of squares of differences, square rooted, all divided by size of x

mabs = sum of the absolute value of differences divided by size of x

*/

/******* TODO: function linear_regression() already exists ******/

linearRegression(obj) := block([ret, a, b, x, y, f],
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], y = a*x + b, [a,b]),
  f : lambda([x], subst(ret["est"], a*x + b)),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

logLinearRegression(obj) := block([ret, a, b, x, y, f],
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], log(y) = a*x + b, [a,b]),
  f : lambda([x], subst(ret["est"], exp(a*x + b))),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

expRegression(obj) := block([ret, a, b, x, y, f], 
  ret["mat"] : transpose(matrix(obj["x"], obj["y"])),
  ret["est"] : lsquares_estimates(ret["mat"], [x, y], y = exp(a*x + b), [a,b],
    initial=[0,1]),
  f : lambda([x], subst(ret["est"], exp(a*x + b))),
  ret["f"] : f,
  ret["yest"] : makelist(ret["f"](obj["x"][i]), i, 1, length(obj["x"])),
  ret["residuals"] : lsquares_residuals(
    ret["mat"], [x, y], y = ret["f"](x), []),
  ret["mabs"] : sum(
    abs(ret["residuals"][i]), i, 1, length(obj["x"]))/length(obj["x"]),
  ret["msqe"] : sqrt(sum(
    ret["residuals"][i]^2, i, 1, length(obj["x"]))/length(obj["x"])),
  return(ret)
  );

/* TODO: split this into a 1d and 2d case AND allow for options after
first one to be passed directly to plot2d */

listplot(l) := plot2d([discrete, makelist(i, i, 1, length(l)), l]);



/* numerical value */

alias(n, float);
alias(take, firstn);
alias(array_keys, bc_keys);
alias(arraylist, listarray);

/* TODO:

add Mathematica Prime[n] = nthprime function

*/

/*

Notes:

  - args command converts matrices to lists

  - listp tests if something a list

  - listarray gives the values of a hash

  - arrayinfo gives the keys of a hash (but in a funky way)

  - draw2d(points(array))

Scratch:

(%i61) sublist(args(matt), lambda([x], x[2] = Mexico));

(%i63) makelist(i[5], i, sublist(args(matt), lambda([x], x[2] = Mexico)));

(%i23) plot2d([[discrete, days, deaths["Canada"]], [discrete, days, deaths["US"]]]);

(%i70) plot2d([[discrete, days, deaths["World"]], [discrete, days, t1238]]);

*/

